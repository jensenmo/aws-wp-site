{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template WordPress with autoscaling",
  "Parameters": {
    "VPCCidrBlock": {
      "Type": "String",
      "Description": "CidrBlock of new VPC to be created",
      "Default": "172.30.0.0/20"
    },
    "DBCidrBlock1": {
      "Type": "String",
      "Description": "CidrBlock of new Subnet to be created inside VPC",
      "Default": "172.30.1.0/24"
    },
    "DBCidrBlock2": {
      "Type": "String",
      "Description": "CidrBlock of new Subnet to be created inside VPC",
      "Default": "172.30.2.0/24"
    },
    "WebServerCidrBlock1": {
      "Type": "String",
      "Description": "CidrBlock of Subnet to be created inside VPC",
      "Default": "172.30.4.0/24"
    },
    "WebServerCidrBlock2": {
      "Type": "String",
      "Description": "CidrBlock of Subnet to be created inside VPC",
      "Default": "172.30.5.0/24"
    },
    "WebServerCidrBlock3": {
      "Type": "String",
      "Description": "CidrBlock of Subnet to be created inside VPC",
      "Default": "172.30.6.0/24"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "InstanceType": {
      "Description": "WebServer instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium"
      ],
      "ConstraintDescription": "must be a valid  instance type."
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "MultiAZDatabase": {
      "Default": "false",
      "Description" : "Create a Multi-AZ MySQL Amazon RDS database instance",
      "Type": "String",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },
    "DBAllocatedStorage" : {
      "Default": "5",
      "Description" : "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",
      "ConstraintDescription" : "must be between 5 and 1024Gb."
    },
    "DBClass" : {
      "Description" : "Database instance class",
      "Type" : "String",
      "Default" : "db.t2.small",
      "AllowedValues" : [ "db.t2.micro", "db.t2.small", "db.m3.medium", "db.m3.large", "db.m3.xlarge", "db.m3.2xlarge", "db.r3.large", "db.r3.xlarge", "db.r3.2xlarge", "db.r3.4xlarge", "db.r3.8xlarge", "db.m2.xlarge", "db.m2.2xlarge", "db.m2.4xlarge", "db.cr1.8xlarge"],
      "ConstraintDescription" : "must select a valid database instance type."
    },
    "DBName": {
      "Default": "wpdb",
      "Description": "The WordPress database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "DBUser": {
      "NoEcho": "true",
      "Description": "The WordPress database admin account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "DBPassword": {
      "NoEcho": "true",
      "Description": "The WordPress database admin account password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
    "DBRootPassword": {
      "NoEcho": "true",
      "Description": "MySQL root password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
    "VolumeName" : {
      "Description" : "The name to be used for the EFS volume",
      "Type": "String",
      "MinLength": "1",
      "Default": "aws-wp-site-test"
    },
    "MountPoint" : {
      "Description" : "The Linux mount point for the EFS volume",
      "Type": "String",
      "MinLength": "1",
      "Default": "website"
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "PV64"
      },
      "t2.micro": {
        "Arch": "HVM64"
      },
      "t2.small": {
        "Arch": "HVM64"
      },
      "t2.medium": {
        "Arch": "HVM64"
      }
    },
    "AWSInstanceType2NATArch": {
      "t1.micro": {
        "Arch": "NATPV64"
      },
      "t2.micro": {
        "Arch": "NATHVM64"
      },
      "t2.small": {
        "Arch": "NATHVM64"
      },
      "t2.medium": {
        "Arch": "NATHVM64"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "PV64": "ami-5fb8c835",
        "HVM64": "ami-60b6c60a",
        "HVMG2": "ami-e998ea83"
      },
      "us-west-2": {
        "PV64": "ami-d93622b8",
        "HVM64": "ami-f0091d91",
        "HVMG2": "ami-315f4850"
      },
      "us-west-1": {
        "PV64": "ami-56ea8636",
        "HVM64": "ami-d5ea86b5",
        "HVMG2": "ami-943956f4"
      },
      "eu-west-1": {
        "PV64": "ami-95e33ce6",
        "HVM64": "ami-bff32ccc",
        "HVMG2": "ami-83fd23f0"
      },
      "eu-central-1": {
        "PV64": "ami-794a5915",
        "HVM64": "ami-bc5b48d0",
        "HVMG2": "ami-ba1a09d6"
      },
      "ap-northeast-1": {
        "PV64": "ami-393c1957",
        "HVM64": "ami-383c1956",
        "HVMG2": "ami-08e5c166"
      },
      "ap-southeast-1": {
        "PV64": "ami-34bd7a57",
        "HVM64": "ami-c9b572aa",
        "HVMG2": "ami-5a15d239"
      },
      "ap-southeast-2": {
        "PV64": "ami-ced887ad",
        "HVM64": "ami-48d38c2b",
        "HVMG2": "ami-0c1a446f"
      },
      "sa-east-1": {
        "PV64": "ami-7d15ad11",
        "HVM64": "ami-6817af04",
        "HVMG2": "NOT_SUPPORTED"
      },
      "cn-north-1": {
        "PV64": "ami-18ac6575",
        "HVM64": "ami-43a36a2e",
        "HVMG2": "NOT_SUPPORTED"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "CidrBlock": { "Ref" : "VPCCidrBlock" },
        "Tags": [ {"Key": "Application", "Value": { "Ref": "AWS::StackId"} } ]
      }
    },
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "GatewayToInternet" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },
    "RouteTable":{
      "Type":"AWS::EC2::RouteTable",
      "Properties":{
        "VpcId": { "Ref":"VPC" }
      }
    },
    "SubnetRouteTableAssoc1": {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "SubnetId" : { "Ref" : "WebServerSubnet1" }
      }
    },
    "SubnetRouteTableAssoc2": {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "SubnetId" : { "Ref" : "WebServerSubnet2" }
      }
    },
    "SubnetRouteTableAssoc3": {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "SubnetId" : { "Ref" : "WebServerSubnet3" }
      }
    },
    "InternetGatewayRoute": {
        "Type":"AWS::EC2::Route",
        "Properties":{
            "DestinationCidrBlock":"0.0.0.0/0",
            "RouteTableId":{"Ref":"RouteTable"},
            "GatewayId":{"Ref":"InternetGateway"}
        }
    },
    "DBSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref" : "VPC" },
        "CidrBlock":  { "Ref": "DBCidrBlock1" },
        "AvailabilityZone": { "Fn::Select": [ 0, { "Fn::GetAZs" : "" } ] }
      }
    },
    "DBSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref" : "VPC" },
        "CidrBlock":  { "Ref": "DBCidrBlock2" },
        "AvailabilityZone": { "Fn::Select": [ 1, { "Fn::GetAZs" : "" } ] }
      }
    },
	"DBSubnetGroup" : {
	  "Type" : "AWS::RDS::DBSubnetGroup",
	  "Properties" : {
		"DBSubnetGroupDescription" : "Subnets available for the RDS DB Instance",
		"SubnetIds" : [ { "Ref" : "DBSubnet1" },  { "Ref" : "DBSubnet2" } ]
	  }
	},
    "DBEC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties" : {
		"VpcId": { "Ref" : "VPC" },
        "GroupDescription": "Open database for access",
        "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : "3306",
          "ToPort" : "3306",
          "SourceSecurityGroupId" : { "Ref" : "WebServerSecurityGroup" }
        }]
      }
    },
    "DBInstance" : {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName"            : { "Ref" : "DBName" },
        "Engine"            : "MySQL",
        "MultiAZ"           : { "Ref": "MultiAZDatabase" },
        "MasterUsername"    : { "Ref" : "DBUser" },
        "MasterUserPassword": { "Ref" : "DBPassword" },
        "DBInstanceClass"   : { "Ref" : "DBClass" },
        "AllocatedStorage"  : { "Ref" : "DBAllocatedStorage" },
        "VPCSecurityGroups" : [ { "Fn::GetAtt": [ "DBEC2SecurityGroup", "GroupId" ] } ],
        "DBSubnetGroupName" : { "Ref" : "DBSubnetGroup" }
      }
	},
    "WebServerSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref" : "VPC" },
        "CidrBlock":  { "Ref": "WebServerCidrBlock1" },
        "MapPublicIpOnLaunch": true,
        "AvailabilityZone": { "Fn::Select": [ 0, { "Fn::GetAZs" : "" } ] }
      }
    },
    "WebServerSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref" : "VPC" },
        "CidrBlock":  { "Ref": "WebServerCidrBlock2" },
        "MapPublicIpOnLaunch": true,
        "AvailabilityZone": { "Fn::Select": [ 1, { "Fn::GetAZs" : "" } ] }
      }
    },
    "WebServerSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref" : "VPC" },
        "CidrBlock":  { "Ref": "WebServerCidrBlock3" },
        "MapPublicIpOnLaunch": true,
        "AvailabilityZone": { "Fn::Select": [ 2, { "Fn::GetAZs" : "" } ] }
      }
    },
    "WebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref" : "VPC" },
        "GroupDescription": "Enable HTTP access via port 80 locked down to the ELB and SSH access",
        "SecurityGroupIngress": [
          { "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "SourceSecurityGroupId" : {"Ref" : "PublicElasticLoadBalancerSecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      }
    },
	"WebServerFileSystem" : {
	  "Type" : "AWS::EFS::FileSystem",
	  "Properties" : {

	  }
	},
    "MountTargetSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "Security group for mount target",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "2049",
            "ToPort": "2049",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "FileSystem": {
      "Type": "AWS::EFS::FileSystem",
      "Properties": {
        "FileSystemTags": [
          {
            "Key": "Name",
            "Value": { "Ref" : "VolumeName" }
          }
        ]
      }
    },
    "MountTarget1": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": { "Ref": "FileSystem" },
        "SubnetId": { "Ref" : "WebServerSubnet1" },
        "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]        
      }
    },
    "MountTarget2": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": { "Ref": "FileSystem" },
        "SubnetId": { "Ref" : "WebServerSubnet2" },
        "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]        
      }
    },
    "MountTarget3": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": { "Ref": "FileSystem" },
        "SubnetId": { "Ref" : "WebServerSubnet3" },
        "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]        
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "wordpress_install": [
              "install_cfn",
              "install_wordpress"
            ]
          },
          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                          "         --stack ", { "Ref" : "AWS::StackName" },
                          "         --resource LaunchConfig ",
                          "         --configsets wordpress_install ",
                          "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},          
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          },
          "install_wordpress" : {
            "packages" : {
              "yum" : {
                "php"       : [],
                "php-mysql" : [],
                "mysql"     : [],
                "httpd"     : [],
                "git"       : [],
                "nfs-utils" : []
              }
            },
            "sources" : {
              "/var/www/html" : "http://wordpress.org/latest.tar.gz"
            },
            "files" : {
              "/tmp/create-wp-config" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash\n",
                  "cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php\n",
                  "sed -i \"s/'database_name_here'/'",{ "Ref" : "DBName" }, "'/g\" wp-config.php\n",
                  "sed -i \"s/'username_here'/'",{ "Ref" : "DBUser" }, "'/g\" wp-config.php\n",
                  "sed -i \"s/'password_here'/'",{ "Ref" : "DBPassword" }, "'/g\" wp-config.php\n",
                  "sed -i \"s/'localhost'/'",{ "Fn::GetAtt" : [ "DBInstance", "Endpoint.Address" ] }, "'/g\" wp-config.php\n",
                  "touch /var/www/html/health.txt\n"
                ]]},
                "mode" : "000500",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_createdir" : {
                "command" : {"Fn::Join" : [ "", [ "mkdir /", { "Ref" : "MountPoint" }]]}
              },
              "02_configure_wordpress" : {
                "command" : "/tmp/create-wp-config",
                "cwd" : "/var/www/html/wordpress"
              }
            },
            "services" : {
              "sysvinit" : {
                "httpd" : { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
          },
          "mount" : {
            "commands" : {
              "01_mount" : {
                "command" : { "Fn::Join": [ "", [
                  "mount -t nfs4 $(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).",
                  { "Ref": "FileSystem" },
                  ".efs.",
                  { "Ref": "AWS::Region" },
                  ".amazonaws.com:/ /",
                  {"Ref" : "MountPoint" }
                ] ] }
              },
              "02_permissions" : {
                "command" : {"Fn::Join" : [ "", [ "chown ec2-user:ec2-user /", { "Ref" : "MountPoint" }]]}
              }
            }
          }
        }
      },
      "Properties": {
		"AssociatePublicIpAddress": "true",
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": { "Ref": "InstanceType" },
        "SecurityGroups": [ { "Ref": "WebServerSecurityGroup" } ],
        "KeyName": { "Ref": "KeyName" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource LaunchConfig ",
                "         --configsets wordpress_install ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource WebServerGroup ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      }
    },
    "WebServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": ["MountTarget1", "MountTarget2", "MountTarget3", "GatewayToInternet"],
      "Properties" : {
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "VPCZoneIdentifier": [ { "Ref": "WebServerSubnet1" }, { "Ref": "WebServerSubnet2" }, { "Ref": "WebServerSubnet3" } ],
        "MinSize" : "1",
        "DesiredCapacity" : "1",
        "MaxSize" : "2",
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "PublicElasticLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP/HTTPS access on port 80 to 80",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [ { 
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        } ],
        "SecurityGroupEgress" : [ { 
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        } ]
      }
    },    
    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "SecurityGroups" : [ { "Ref" : "PublicElasticLoadBalancerSecurityGroup" } ],
        "CrossZone" : "true",
        "Subnets" : [ { "Ref" : "WebServerSubnet1" }, { "Ref" : "WebServerSubnet2" }, { "Ref" : "WebServerSubnet3" } ],
        "LBCookieStickinessPolicy" : [ {
          "PolicyName" : "CookieBasedPolicy",
          "CookieExpirationPeriod" : "30"
        } ],
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : "80",
          "Protocol" : "HTTP",
          "PolicyNames" : [ "CookieBasedPolicy" ]
        } ],
        "HealthCheck" : {
          "Target" : "HTTP:80/health.txt",
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "5",
          "Interval" : "10",
          "Timeout" : "5"
        }
      }
    }
  },
  "Outputs": {
    "MountTargetID1" : {
      "Description" : "Mount target ID",
      "Value" :  { "Ref" : "MountTarget1" }
    },
    "MountTargetID2" : {
      "Description" : "Mount target ID",
      "Value" :  { "Ref" : "MountTarget2" }
    },
    "MountTargetID3" : {
      "Description" : "Mount target ID",
      "Value" :  { "Ref" : "MountTarget3" }
    },
    "FileSystemID" : {
      "Description" : "File system ID",
      "Value" :  { "Ref" : "FileSystem" }
    },	  
    "WebsiteURL": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "DNSName"
              ]
            },
            "/wordpress"
          ]
        ]
      },
      "Description": "WordPress Website"
    }
  }
}
